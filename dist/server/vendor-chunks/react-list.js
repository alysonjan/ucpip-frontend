/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-list";
exports.ids = ["vendor-chunks/react-list"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-list/react-list.js":
/*!***********************************************!*\
  !*** ./node_modules/react-list/react-list.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var mod; }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_exports, _react, _jsxRuntime) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports[\"default\"] = void 0;\n  function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n  function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\n  function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\n  function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\n  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n  function _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\n  function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n  function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\n  function _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\n  function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n  function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\n  function _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\n  function _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n  var CLIENT_SIZE_KEYS = {\n    x: 'clientWidth',\n    y: 'clientHeight'\n  };\n  var CLIENT_START_KEYS = {\n    x: 'clientTop',\n    y: 'clientLeft'\n  };\n  var INNER_SIZE_KEYS = {\n    x: 'innerWidth',\n    y: 'innerHeight'\n  };\n  var OFFSET_SIZE_KEYS = {\n    x: 'offsetWidth',\n    y: 'offsetHeight'\n  };\n  var OFFSET_START_KEYS = {\n    x: 'offsetLeft',\n    y: 'offsetTop'\n  };\n  var OVERFLOW_KEYS = {\n    x: 'overflowX',\n    y: 'overflowY'\n  };\n  var SCROLL_SIZE_KEYS = {\n    x: 'scrollWidth',\n    y: 'scrollHeight'\n  };\n  var SCROLL_START_KEYS = {\n    x: 'scrollLeft',\n    y: 'scrollTop'\n  };\n  var SIZE_KEYS = {\n    x: 'width',\n    y: 'height'\n  };\n  var NOOP = function NOOP() {};\n\n  // If a browser doesn't support the `options` argument to\n  // add/removeEventListener, we need to check, otherwise we will\n  // accidentally set `capture` with a truthy value.\n  var PASSIVE = function () {\n    if (typeof window === 'undefined') return false;\n    var hasSupport = false;\n    try {\n      document.createElement('div').addEventListener('test', NOOP, {\n        get passive() {\n          hasSupport = true;\n          return false;\n        }\n      });\n    } catch (e) {\n      // noop\n    }\n    return hasSupport;\n  }() ? {\n    passive: true\n  } : false;\n  var UNSTABLE_MESSAGE = 'ReactList failed to reach a stable state.';\n  var MAX_SYNC_UPDATES = 40;\n  var isEqualSubset = function isEqualSubset(a, b) {\n    for (var key in b) if (a[key] !== b[key]) return false;\n    return true;\n  };\n  var defaultScrollParentGetter = function defaultScrollParentGetter(component) {\n    var axis = component.props.axis;\n    var el = component.getEl();\n    var overflowKey = OVERFLOW_KEYS[axis];\n    while (el = el.parentElement) {\n      switch (window.getComputedStyle(el)[overflowKey]) {\n        case 'auto':\n        case 'scroll':\n        case 'overlay':\n          return el;\n      }\n    }\n    return window;\n  };\n  var defaultScrollParentViewportSizeGetter = function defaultScrollParentViewportSizeGetter(component) {\n    var axis = component.props.axis;\n    var scrollParent = component.scrollParent;\n    return scrollParent === window ? window[INNER_SIZE_KEYS[axis]] : scrollParent[CLIENT_SIZE_KEYS[axis]];\n  };\n  var constrain = function constrain(props, state) {\n    var length = props.length,\n      minSize = props.minSize,\n      type = props.type;\n    var from = state.from,\n      size = state.size,\n      itemsPerRow = state.itemsPerRow;\n    size = Math.max(size, minSize);\n    var mod = size % itemsPerRow;\n    if (mod) size += itemsPerRow - mod;\n    if (size > length) size = length;\n    from = type === 'simple' || !from ? 0 : Math.max(Math.min(from, length - size), 0);\n    if (mod = from % itemsPerRow) {\n      from -= mod;\n      size += mod;\n    }\n    if (from === state.from && size === state.size) return state;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      from: from,\n      size: size\n    });\n  };\n  var ReactList = _exports[\"default\"] = /*#__PURE__*/function (_Component) {\n    function ReactList(props) {\n      var _this;\n      _classCallCheck(this, ReactList);\n      _this = _callSuper(this, ReactList, [props]);\n      _this.state = constrain(props, {\n        itemsPerRow: 1,\n        from: props.initialIndex,\n        size: 0\n      });\n      _this.cache = {};\n      _this.cachedScrollPosition = null;\n      _this.prevPrevState = {};\n      _this.unstable = false;\n      _this.updateCounter = 0;\n      return _this;\n    }\n    _inherits(ReactList, _Component);\n    return _createClass(ReactList, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.updateFrameAndClearCache = this.updateFrameAndClearCache.bind(this);\n        window.addEventListener('resize', this.updateFrameAndClearCache);\n        this.updateFrame(this.scrollTo.bind(this, this.props.initialIndex));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var _this2 = this;\n        // Viewport scroll is no longer useful if axis changes\n        if (this.props.axis !== prevProps.axis) this.clearSizeCache();\n\n        // If the list has reached an unstable state, prevent an infinite loop.\n        if (this.unstable) return;\n        if (++this.updateCounter > MAX_SYNC_UPDATES) {\n          this.unstable = true;\n          return console.error(UNSTABLE_MESSAGE);\n        }\n        if (!this.updateCounterTimeoutId) {\n          this.updateCounterTimeoutId = setTimeout(function () {\n            _this2.updateCounter = 0;\n            delete _this2.updateCounterTimeoutId;\n          }, 0);\n        }\n        this.updateFrame();\n      }\n    }, {\n      key: \"maybeSetState\",\n      value: function maybeSetState(b, cb) {\n        if (isEqualSubset(this.state, b)) return cb();\n        this.setState(b, cb);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        window.removeEventListener('resize', this.updateFrameAndClearCache);\n        this.scrollParent.removeEventListener('scroll', this.updateFrameAndClearCache, PASSIVE);\n        this.scrollParent.removeEventListener('mousewheel', NOOP, PASSIVE);\n      }\n    }, {\n      key: \"getOffset\",\n      value: function getOffset(el) {\n        var axis = this.props.axis;\n        var offset = el[CLIENT_START_KEYS[axis]] || 0;\n        var offsetKey = OFFSET_START_KEYS[axis];\n        do offset += el[offsetKey] || 0; while (el = el.offsetParent);\n        return offset;\n      }\n    }, {\n      key: \"getEl\",\n      value: function getEl() {\n        return this.el || this.items;\n      }\n    }, {\n      key: \"getScrollPosition\",\n      value: function getScrollPosition() {\n        // Cache scroll position as this causes a forced synchronous layout.\n        if (typeof this.cachedScrollPosition === 'number') {\n          return this.cachedScrollPosition;\n        }\n        var scrollParent = this.scrollParent;\n        var axis = this.props.axis;\n        var scrollKey = SCROLL_START_KEYS[axis];\n        var actual = scrollParent === window ?\n        // Firefox always returns document.body[scrollKey] as 0 and Chrome/Safari\n        // always return document.documentElement[scrollKey] as 0, so take\n        // whichever has a value.\n        document.body[scrollKey] || document.documentElement[scrollKey] : scrollParent[scrollKey];\n        var max = this.getScrollSize() - this.props.scrollParentViewportSizeGetter(this);\n        var scroll = Math.max(0, Math.min(actual, max));\n        var el = this.getEl();\n        this.cachedScrollPosition = this.getOffset(scrollParent) + scroll - this.getOffset(el);\n        return this.cachedScrollPosition;\n      }\n    }, {\n      key: \"setScroll\",\n      value: function setScroll(offset) {\n        var scrollParent = this.scrollParent;\n        var axis = this.props.axis;\n        offset += this.getOffset(this.getEl());\n        if (scrollParent === window) return window.scrollTo(0, offset);\n        offset -= this.getOffset(this.scrollParent);\n        scrollParent[SCROLL_START_KEYS[axis]] = offset;\n      }\n    }, {\n      key: \"getScrollSize\",\n      value: function getScrollSize() {\n        var scrollParent = this.scrollParent;\n        var _document = document,\n          body = _document.body,\n          documentElement = _document.documentElement;\n        var key = SCROLL_SIZE_KEYS[this.props.axis];\n        return scrollParent === window ? Math.max(body[key], documentElement[key]) : scrollParent[key];\n      }\n    }, {\n      key: \"hasDeterminateSize\",\n      value: function hasDeterminateSize() {\n        var _this$props = this.props,\n          itemSizeGetter = _this$props.itemSizeGetter,\n          type = _this$props.type;\n        return type === 'uniform' || itemSizeGetter;\n      }\n    }, {\n      key: \"getStartAndEnd\",\n      value: function getStartAndEnd() {\n        var threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.threshold;\n        var scroll = this.getScrollPosition();\n        var start = Math.max(0, scroll - threshold);\n        var end = scroll + this.props.scrollParentViewportSizeGetter(this) + threshold;\n        if (this.hasDeterminateSize()) {\n          end = Math.min(end, this.getSpaceBefore(this.props.length));\n        }\n        return {\n          start: start,\n          end: end\n        };\n      }\n    }, {\n      key: \"getItemSizeAndItemsPerRow\",\n      value: function getItemSizeAndItemsPerRow() {\n        var _this$props2 = this.props,\n          axis = _this$props2.axis,\n          useStaticSize = _this$props2.useStaticSize;\n        var _this$state = this.state,\n          itemSize = _this$state.itemSize,\n          itemsPerRow = _this$state.itemsPerRow;\n        if (useStaticSize && itemSize && itemsPerRow) {\n          return {\n            itemSize: itemSize,\n            itemsPerRow: itemsPerRow\n          };\n        }\n        var itemEls = this.items.children;\n        if (!itemEls.length) return {};\n        var firstEl = itemEls[0];\n\n        // Firefox has a problem where it will return a *slightly* (less than\n        // thousandths of a pixel) different size for the same element between\n        // renders. This can cause an infinite render loop, so only change the\n        // itemSize when it is significantly different.\n        var firstElSize = firstEl[OFFSET_SIZE_KEYS[axis]];\n        var delta = Math.abs(firstElSize - itemSize);\n        if (isNaN(delta) || delta >= 1) itemSize = firstElSize;\n        if (!itemSize) return {};\n        var startKey = OFFSET_START_KEYS[axis];\n        var firstStart = firstEl[startKey];\n        itemsPerRow = 1;\n        for (var item = itemEls[itemsPerRow]; item && item[startKey] === firstStart; item = itemEls[itemsPerRow]) {\n          ++itemsPerRow;\n        }\n        return {\n          itemSize: itemSize,\n          itemsPerRow: itemsPerRow\n        };\n      }\n    }, {\n      key: \"clearSizeCache\",\n      value: function clearSizeCache() {\n        this.cachedScrollPosition = null;\n      }\n\n      // Called by 'scroll' and 'resize' events, clears scroll position cache.\n    }, {\n      key: \"updateFrameAndClearCache\",\n      value: function updateFrameAndClearCache(cb) {\n        this.clearSizeCache();\n        return this.updateFrame(cb);\n      }\n    }, {\n      key: \"updateFrame\",\n      value: function updateFrame(cb) {\n        this.updateScrollParent();\n        if (typeof cb !== 'function') cb = NOOP;\n        switch (this.props.type) {\n          case 'simple':\n            return this.updateSimpleFrame(cb);\n          case 'variable':\n            return this.updateVariableFrame(cb);\n          case 'uniform':\n            return this.updateUniformFrame(cb);\n        }\n      }\n    }, {\n      key: \"updateScrollParent\",\n      value: function updateScrollParent() {\n        var prev = this.scrollParent;\n        this.scrollParent = this.props.scrollParentGetter(this);\n        if (prev === this.scrollParent) return;\n        if (prev) {\n          prev.removeEventListener('scroll', this.updateFrameAndClearCache);\n          prev.removeEventListener('mousewheel', NOOP);\n        }\n        // If we have a new parent, cached parent dimensions are no longer useful.\n        this.clearSizeCache();\n        this.scrollParent.addEventListener('scroll', this.updateFrameAndClearCache, PASSIVE);\n        // You have to attach mousewheel listener to the scrollable element.\n        // Just an empty listener. After that onscroll events will be fired synchronously.\n        this.scrollParent.addEventListener('mousewheel', NOOP, PASSIVE);\n      }\n    }, {\n      key: \"updateSimpleFrame\",\n      value: function updateSimpleFrame(cb) {\n        var _this$getStartAndEnd = this.getStartAndEnd(),\n          end = _this$getStartAndEnd.end;\n        var itemEls = this.items.children;\n        var elEnd = 0;\n        if (itemEls.length) {\n          var axis = this.props.axis;\n          var firstItemEl = itemEls[0];\n          var lastItemEl = itemEls[itemEls.length - 1];\n          elEnd = this.getOffset(lastItemEl) + lastItemEl[OFFSET_SIZE_KEYS[axis]] - this.getOffset(firstItemEl);\n        }\n        if (elEnd > end) return cb();\n        var _this$props3 = this.props,\n          pageSize = _this$props3.pageSize,\n          length = _this$props3.length;\n        var size = Math.min(this.state.size + pageSize, length);\n        this.maybeSetState({\n          size: size\n        }, cb);\n      }\n    }, {\n      key: \"updateVariableFrame\",\n      value: function updateVariableFrame(cb) {\n        if (!this.props.itemSizeGetter) this.cacheSizes();\n        var _this$getStartAndEnd2 = this.getStartAndEnd(),\n          start = _this$getStartAndEnd2.start,\n          end = _this$getStartAndEnd2.end;\n        var _this$props4 = this.props,\n          length = _this$props4.length,\n          pageSize = _this$props4.pageSize;\n        var space = 0;\n        var from = 0;\n        var size = 0;\n        var maxFrom = length - 1;\n        while (from < maxFrom) {\n          var itemSize = this.getSizeOfItem(from);\n          if (itemSize == null || space + itemSize > start) break;\n          space += itemSize;\n          ++from;\n        }\n        var maxSize = length - from;\n        while (size < maxSize && space < end) {\n          var _itemSize = this.getSizeOfItem(from + size);\n          if (_itemSize == null) {\n            size = Math.min(size + pageSize, maxSize);\n            break;\n          }\n          space += _itemSize;\n          ++size;\n        }\n        this.maybeSetState(constrain(this.props, {\n          from: from,\n          itemsPerRow: 1,\n          size: size\n        }), cb);\n      }\n    }, {\n      key: \"updateUniformFrame\",\n      value: function updateUniformFrame(cb) {\n        var _this$getItemSizeAndI = this.getItemSizeAndItemsPerRow(),\n          itemSize = _this$getItemSizeAndI.itemSize,\n          itemsPerRow = _this$getItemSizeAndI.itemsPerRow;\n        if (!itemSize || !itemsPerRow) return cb();\n        var _this$getStartAndEnd3 = this.getStartAndEnd(),\n          start = _this$getStartAndEnd3.start,\n          end = _this$getStartAndEnd3.end;\n        var _constrain = constrain(this.props, {\n            from: Math.floor(start / itemSize) * itemsPerRow,\n            size: (Math.ceil((end - start) / itemSize) + 1) * itemsPerRow,\n            itemsPerRow: itemsPerRow\n          }),\n          from = _constrain.from,\n          size = _constrain.size;\n        return this.maybeSetState({\n          itemsPerRow: itemsPerRow,\n          from: from,\n          itemSize: itemSize,\n          size: size\n        }, cb);\n      }\n    }, {\n      key: \"getSpaceBefore\",\n      value: function getSpaceBefore(index) {\n        var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (cache[index] != null) return cache[index];\n\n        // Try the static itemSize.\n        var _this$state2 = this.state,\n          itemSize = _this$state2.itemSize,\n          itemsPerRow = _this$state2.itemsPerRow;\n        if (itemSize) {\n          return cache[index] = Math.floor(index / itemsPerRow) * itemSize;\n        }\n\n        // Find the closest space to index there is a cached value for.\n        var from = index;\n        while (from > 0 && cache[--from] == null);\n\n        // Finally, accumulate sizes of items from - index.\n        var space = cache[from] || 0;\n        for (var i = from; i < index; ++i) {\n          cache[i] = space;\n          var _itemSize2 = this.getSizeOfItem(i);\n          if (_itemSize2 == null) break;\n          space += _itemSize2;\n        }\n        return cache[index] = space;\n      }\n    }, {\n      key: \"cacheSizes\",\n      value: function cacheSizes() {\n        var cache = this.cache;\n        var from = this.state.from;\n        var itemEls = this.items.children;\n        var sizeKey = OFFSET_SIZE_KEYS[this.props.axis];\n        for (var i = 0, l = itemEls.length; i < l; ++i) {\n          cache[from + i] = itemEls[i][sizeKey];\n        }\n      }\n    }, {\n      key: \"getSizeOfItem\",\n      value: function getSizeOfItem(index) {\n        var cache = this.cache,\n          items = this.items;\n        var _this$props5 = this.props,\n          axis = _this$props5.axis,\n          itemSizeGetter = _this$props5.itemSizeGetter,\n          itemSizeEstimator = _this$props5.itemSizeEstimator,\n          type = _this$props5.type;\n        var _this$state3 = this.state,\n          from = _this$state3.from,\n          itemSize = _this$state3.itemSize,\n          size = _this$state3.size;\n\n        // Try the static itemSize.\n        if (itemSize) return itemSize;\n\n        // Try the itemSizeGetter.\n        if (itemSizeGetter) return itemSizeGetter(index);\n\n        // Try the cache.\n        if (index in cache) return cache[index];\n\n        // Try the DOM.\n        if (type === 'simple' && index >= from && index < from + size && items) {\n          var itemEl = items.children[index - from];\n          if (itemEl) return itemEl[OFFSET_SIZE_KEYS[axis]];\n        }\n\n        // Try the itemSizeEstimator.\n        if (itemSizeEstimator) return itemSizeEstimator(index, cache);\n      }\n    }, {\n      key: \"scrollTo\",\n      value: function scrollTo(index) {\n        if (index != null) this.setScroll(this.getSpaceBefore(index));\n      }\n    }, {\n      key: \"scrollAround\",\n      value: function scrollAround(index) {\n        var current = this.getScrollPosition();\n        var bottom = this.getSpaceBefore(index);\n        var top = bottom - this.props.scrollParentViewportSizeGetter(this) + this.getSizeOfItem(index);\n        var min = Math.min(top, bottom);\n        var max = Math.max(top, bottom);\n        if (current <= min) return this.setScroll(min);\n        if (current > max) return this.setScroll(max);\n      }\n    }, {\n      key: \"getVisibleRange\",\n      value: function getVisibleRange() {\n        var _this$state4 = this.state,\n          from = _this$state4.from,\n          size = _this$state4.size;\n        var _this$getStartAndEnd4 = this.getStartAndEnd(0),\n          start = _this$getStartAndEnd4.start,\n          end = _this$getStartAndEnd4.end;\n        var cache = {};\n        var first, last;\n        for (var i = from; i < from + size; ++i) {\n          var itemStart = this.getSpaceBefore(i, cache);\n          var itemEnd = itemStart + this.getSizeOfItem(i);\n          if (first == null && itemEnd > start) first = i;\n          if (first != null && itemStart < end) last = i;\n        }\n        return [first, last];\n      }\n    }, {\n      key: \"renderItems\",\n      value: function renderItems() {\n        var _this3 = this;\n        var _this$props6 = this.props,\n          itemRenderer = _this$props6.itemRenderer,\n          itemsRenderer = _this$props6.itemsRenderer;\n        var _this$state5 = this.state,\n          from = _this$state5.from,\n          size = _this$state5.size;\n        var items = [];\n        for (var i = 0; i < size; ++i) items.push(itemRenderer(from + i, i));\n        return itemsRenderer(items, function (c) {\n          return _this3.items = c;\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this4 = this;\n        var _this$props7 = this.props,\n          axis = _this$props7.axis,\n          length = _this$props7.length,\n          type = _this$props7.type,\n          useTranslate3d = _this$props7.useTranslate3d;\n        var _this$state6 = this.state,\n          from = _this$state6.from,\n          itemsPerRow = _this$state6.itemsPerRow;\n        var items = this.renderItems();\n        if (type === 'simple') return items;\n        var style = {\n          position: 'relative'\n        };\n        var cache = {};\n        var bottom = Math.ceil(length / itemsPerRow) * itemsPerRow;\n        var size = this.getSpaceBefore(bottom, cache);\n        if (size) {\n          style[SIZE_KEYS[axis]] = size;\n          if (axis === 'x') style.overflowX = 'hidden';\n        }\n        var offset = this.getSpaceBefore(from, cache);\n        var x = axis === 'x' ? offset : 0;\n        var y = axis === 'y' ? offset : 0;\n        var transform = useTranslate3d ? \"translate3d(\".concat(x, \"px, \").concat(y, \"px, 0)\") : \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n        var listStyle = {\n          msTransform: transform,\n          WebkitTransform: transform,\n          transform: transform\n        };\n        return /*#__PURE__*/(0, _jsxRuntime.jsx)(\"div\", {\n          style: style,\n          ref: function ref(c) {\n            return _this4.el = c;\n          },\n          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(\"div\", {\n            style: listStyle,\n            children: items\n          })\n        });\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(props, state) {\n        var newState = constrain(props, state);\n        return newState === state ? null : newState;\n      }\n    }]);\n  }(_react.Component);\n  _defineProperty(ReactList, \"displayName\", 'ReactList');\n  _defineProperty(ReactList, \"defaultProps\", {\n    axis: 'y',\n    itemRenderer: function itemRenderer(index, key) {\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(\"div\", {\n        children: index\n      }, key);\n    },\n    itemsRenderer: function itemsRenderer(items, ref) {\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(\"div\", {\n        ref: ref,\n        children: items\n      });\n    },\n    length: 0,\n    minSize: 1,\n    pageSize: 10,\n    scrollParentGetter: defaultScrollParentGetter,\n    scrollParentViewportSizeGetter: defaultScrollParentViewportSizeGetter,\n    threshold: 100,\n    type: 'simple',\n    useStaticSize: false,\n    useTranslate3d: false\n  });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-list/react-list.js\n");

/***/ })

};
;